<?xml version='1.0' encoding='utf-8'?>
<configDoc screen="images/screen_comp_declension_female.comp.png" cfgFilePath="workspace://component_manager/component/internal/cz_name_declension_simple/comp_declension_female.comp" runtimeVersion="8.0.5.ga-2014-04-22" companyImage="images/logo_about.png" fileName="comp_declension_female.comp" date="2014-06-12 08:16:43" xmlns:comm="http://www.ataccama.com/purity/comment" version="1.0">
  <generatorMeta name="Master Data Center 8.0.5" company="Ataccama Corporation" about="{0}

Version: {1}

Copyright © 2002-{2} {3} All rights reserved.

Your use of the product is subject to the {0} end user license agreement." date="2014-06-12 08:22:42"/>
  <configAlg name="Multiple word names (Condition)" image="images/Condition.large.png" class="com.ataccama.dqc.tasks.conditions.Condition" disabled="true">
    <properties condition="find(&#39;[ -]&#39;, name)"/>
  </configAlg>
  <configAlg name="in (Integration Input)" image="images/InputStep.large.png" class="com.ataccama.dqc.tasks.common.usersteps.io.InputStep">
    <properties>
      <columns>
        <columnDef name="name" type="STRING"/>
      </columns>
      <shadowColumns>
        <shadowColumnDef name="accusative" type="STRING"/>
        <shadowColumnDef name="vocative" type="STRING"/>
        <shadowColumnDef name="expl_f_rule" type="STRING"/>
      </shadowColumns>
    </properties>
  </configAlg>
  <configAlg name="It is short name (Condition)" image="images/Condition.large.png" class="com.ataccama.dqc.tasks.conditions.Condition">
    <properties>
      <condition>//vyjimka:=null;
// not vyjimka and
(length(name) is 1 or length(name) is 2)</condition>
      <comm:comment>Short names</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Check oriental syllable (Strip Titles)" image="images/StripTitlesAlgorithm.large.png" class="com.ataccama.dqc.tasks.clean.StripTitlesAlgorithm">
    <properties titleLookupFileName="pathvar://DATA/ext/lkp/cz_name_declension_orient_female.lkp" preserveUnsupportedChars="true" ignoredSeparators="._/" in="name" separator="" minWordCount="0">
      <scorer explanationColumn="expl_f_rule">
        <scoringEntries>
          <scoringEntry score="0" explainAs="ORIENT_FOUND" explain="true" key="ST_CHANGED"/>
        </scoringEntries>
      </scorer>
      <tokenizer whiteSpaceDefinition="[:white:]">
        <types>
          <tokenType tokenStartCharacters="[:letter:]" tokenCharacters="[:letter:]"/>
          <tokenType tokenStartCharacters="[:digit:]" tokenCharacters="[:digit:]"/>
        </types>
      </tokenizer>
      <comm:comment>Check oriental syllable</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Contains oriental syllable (Condition)" image="images/Condition.large.png" class="com.ataccama.dqc.tasks.conditions.Condition">
    <properties condition="containsWord(expl_f_rule, &#39;ORIENT_FOUND&#39;)">
      <comm:comment>Contains oriental syllable</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Ends with &quot;Ová&quot;, &quot;Ská&quot;, ... (with exceptions) - undeclinable lastnames (Condition)" image="images/Condition.large.png" class="com.ataccama.dqc.tasks.conditions.Condition">
    <properties>
      <condition>(right(name, 3) is in {&#39;ová&#39;, &#39;ova&#39;, &#39;ská&#39;, &#39;cká&#39;, &#39;čná&#39;, &#39;avá&#39;, &#39;nko&#39;, &#39;atá&#39;, &#39;ých&#39;, &#39;ska&#39;, &#39;cka&#39;, &#39;owa&#39;} //ska,cka,owa - vetsinou polske
 and lower(name) not in {&#39;priska&#39;, &#39;franziska&#39;, &#39;piroska&#39;, &#39;paraska&#39;, &#39;valeska&#39;, &#39;narciska&#39;, &#39;franciska&#39;, &#39;eliska&#39;, &#39;atanaska&#39;, &#39;franceska&#39;, &#39;jindriska&#39;, &#39;veska&#39;, &#39;waleska&#39;, &#39;nataska&#39;, &#39;boriska&#39;, &#39;mariska&#39;, &#39;micka&#39;, &#39;moska&#39;, &#39;katiuska&#39;, &#39;kráska&#39;, &#39;liska&#39;, &#39;jaska&#39;, &#39;nacka&#39;, &#39;francizska&#39;, &#39;francka&#39;, &#39;ericka&#39;, &#39;agniezska&#39;, &#39;duska&#39;, &#39;gacka&#39;, &#39;iriska&#39;, &#39;kocka&#39;, &#39;gecka&#39;, &#39;tanaska&#39;, &#39;ruska&#39;, &#39;spaska&#39;, &#39;vítězska&#39;, &#39;toska&#39;, &#39;zuska&#39;, &#39;francizka&#39;} )
or
right(name, 2) is in {&#39;ná&#39;, &#39;lá&#39;, &#39;dá&#39;, &#39;an&#39;, &#39;ká&#39;, &#39;uk&#39;, &#39;ak&#39;, &#39;ng&#39;, &#39;vá&#39;, &#39;ko&#39;, &#39;tá&#39;, &#39;ch&#39;, &#39;rá&#39;, &#39;há&#39;, &#39;er&#39;, &#39;in&#39;, &#39;ts&#39;, &#39;ar&#39;, &#39;yn&#39;,
&#39;yk&#39;, &#39;am&#39;, &#39;en&#39;, &#39;nh&#39;, &#39;el&#39;, &#39;iv&#39;, &#39;on&#39;, &#39;li&#39;, &#39;es&#39;, &#39;eg&#39;, &#39;li&#39;, &#39;sh&#39;, &#39;et&#39;, &#39;ey&#39;,&#39;al&#39;,&#39;iy&#39;,&#39;má&#39;,&#39;id&#39;,&#39;ly&#39;,&#39;ni&#39;,&#39;šu&#39;,&#39;ud&#39;,&#39;bá&#39;,
&#39;eí&#39;,&#39;is&#39;,&#39;ní&#39;,&#39;nn&#39;,&#39;ov&#39;,&#39;th&#39;,&#39;un&#39;,&#39;ao&#39;,&#39;hi&#39;,&#39;it&#39;,&#39;lu&#39;,&#39;no&#39;,&#39;ru&#39;,&#39;ah&#39;,&#39;ai&#39;,&#39;as&#39;,&#39;au&#39;,&#39;ay&#39;,&#39;cí&#39;,&#39;cu&#39;,&#39;hu&#39;,&#39;ku&#39;,&#39;nu&#39;,&#39;oi&#39;,&#39;or&#39;,&#39;ry&#39;,
&#39;sá&#39;,&#39;ší&#39;,&#39;tu&#39;,&#39;du&#39;,&#39;dy&#39;,&#39;ec&#39;,&#39;eu&#39;,&#39;ll&#39;,&#39;lo&#39;,&#39;mi&#39;,&#39;ol&#39;,&#39;pá&#39;,&#39;pi&#39;,&#39;rj&#39;,&#39;ty&#39;,&#39;ur&#39;,&#39;ut&#39;,&#39;at&#39;,&#39;cy&#39;,&#39;ki&#39;,&#39;ny&#39;,&#39;os&#39;,&#39;ou&#39;,&#39;ri&#39;,&#39;si&#39;,&#39;tt&#39;,
&#39;uc&#39;,&#39;us&#39;,&#39;wá&#39;,&#39;ym&#39;,&#39;ad&#39;}
//Dagmar
</condition>
      <comm:comment>List of endings, when we don&#39;t decline names.


http://prirucka.ujc.cas.cz/?id=352

1 Jména zakončená v psané i vyslovované podobě na souhlásku

(Dagmar, Ingrid, Eleonor, Carmen, Maud, Marylin, Kim)

Přestože Mluvnice češtiny přiřazuje většinu jmen tohoto typu ke skloňování podle vzoru „žena“ a uvádí, že pod vlivem tohoto paradigmatu proniká do 1. p. zakončení -a (Dagmar – Dagmara, Eleonor – Eleonora, Karin – Karina), současný běžný úzus je trochu jiný a tato jména zůstávají obvykle nesklonná. Ta, která mají českou obdobu s koncovým -a (Dagmar – Dagmara, Eleonor – Eleonora, Karin – Karina), se opravdu občas počešťují a v nepřímých pádech přibírají koncovky vzoru „žena“  (2. p. Dagmary, Eleonory, Kariny), ale nesklonné pojetí převažuje. Volba závisí do velké míry na situaci, na typu textu a pojmenovávané osobě. Např. v beletrii je počešťování jmen běžné, také jména známých historických osobností tradičně počešťujeme (Eleonor Akvitánská – Eleonora Akvitánská). Pokud však jde o osobnost méně známou, současnou, jejíž jméno je užito např. v publicistickém textu, pak je u autorů patrná spíše snaha o zachování základní podoby jména ve všech pádech. Aby bylo čtenáři zřejmé, že žena se jmenuje např. Eleonor, nikoli Eleonora. Někdy dochází ke kolísání a v úzu se lze setkat s oběma podobami jména.</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Ends with &quot;a&quot; (Condition)" image="images/Condition.large.png" class="com.ataccama.dqc.tasks.conditions.Condition">
    <properties>
      <condition>/* LUSL: asi zbytocne
right(name, 2) is in {&#39;na&#39;, &#39;ka&#39;}
or
*/
right(name, 1) is in {&#39;a&#39;}
//projít, jestli není nějaká výjimka, ale neměla by být</condition>
      <comm:comment>Ends with &quot;a&quot;</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Ends with &quot;e&quot;, &quot;i&quot;, ... (Condition)" image="images/Condition.large.png" class="com.ataccama.dqc.tasks.conditions.Condition">
    <properties>
      <condition>right(name, 1) is in {&#39;e&#39;, &#39;ů&#39;, &#39;i&#39;, &#39;í&#39;, &#39;ú&#39;, &#39;u&#39; ,&#39;k&#39;, &#39;o&#39;,&#39;y&#39;,&#39;s&#39;,&#39;d&#39;,&#39;z&#39;,&#39;p&#39;,&#39;é&#39;,&#39;t&#39;,&#39;n&#39;,&#39;g&#39;,&#39;h&#39;,&#39;l&#39;,&#39;ó&#39;,&#39;b&#39;,&#39;m&#39;,&#39;c&#39;,&#39;i&#39;,
&#39;f&#39;,&#39;x&#39;,&#39;á&#39;,&#39;e&#39;,&#39;j&#39;,&#39;r&#39;,&#39;ß&#39;,&#39;v&#39;,&#39;w&#39;, &#39;ě&#39;, &#39;č&#39;, &#39;š&#39;}
//š: Buš</condition>
      <comm:comment>Ends with &quot;e&quot;, &quot;i&quot;, ...</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Use &quot;&quot;, &quot;ou&quot;, &quot;i&quot; (Accu) and &quot;&quot; (Voc) declension (Union Same)" image="images/UnionSame.large.png" class="com.ataccama.dqc.tasks.conditions.UnionSame">
    <properties/>
  </configAlg>
  <configAlg name="Accusative suffix &quot;&quot;, &quot;ou&quot;, &quot;i&quot;, Vocative &quot;&quot; (Column Assigner)" image="images/ColumnAssigner.large.png" class="com.ataccama.dqc.tasks.expressions.ColumnAssigner">
    <properties>
      <assignments>
        <assignment expression="name" column="vocative">
          <scorer>
            <scoringEntries>
              <scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
            </scoringEntries>
          </scorer>
        </assignment>
        <assignment column="accusative">
          <expression>privlPrij:=right(name, 3) is in {&#39;ová&#39;, &#39;ská&#39;, &#39;cká&#39;, &#39;ova&#39;, &#39;ska&#39;, &#39;cka&#39;, &#39;owa&#39;}
or right(name, 2) is in {&#39;ká&#39;} or right(name, 1) is in {&#39;á&#39;};

souhlaskae:=matches(&#39;^.*[bdgfklmnprstvz]e$&#39;, name); //de(Heide),ke(Ulrike, Frederike),ge(Inge),te(Charlotte, Ute), atd.

ie:=right(name, 1) is in {&#39;e&#39;};
//TODO když se to e nečte

//koncovky ue:Dominique, atd.
neohybej:=right(name, 3) is in {&#39;nko&#39;, &#39;yuk&#39;} or right(name, 2) is in {&#39;uk&#39;, &#39;er&#39;, &#39;ue&#39;} or
right(name, 1) is in {&#39;i&#39;, &#39;g&#39;, &#39;h&#39;, &#39;y&#39;, &#39;k&#39;, &#39;s&#39;, &#39;ů&#39;, &#39;ú&#39;, &#39;u&#39;, &#39;l&#39;, &#39;o&#39;, &#39;ó&#39;, &#39;r&#39;, &#39;t&#39;, &#39;í&#39;, &#39;d&#39;, &#39;v&#39;, &#39;m&#39;, &#39;n&#39;, &#39;c&#39;, &#39;z&#39;, &#39;p&#39;, &#39;é&#39;, &#39;j&#39;,
&#39;b&#39;, &#39;ě&#39;, &#39;x&#39;, &#39;č&#39;, &#39;f&#39;, &#39;w&#39;, &#39;ß&#39;, &#39;š&#39;}; //u: Susan ani Erikson, Urmann, atd.

case (
	privlPrij, left(name, length(name)-1) + &#39;ou&#39;,
	souhlaskae,name,
	neohybej, name,
	ie, left(name, length(name)-1) + &#39;i&#39;,
	null
)</expression>
          <scorer>
            <scoringEntries>
              <scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
            </scoringEntries>
          </scorer>
          <comm:comment>Accusative:
- names end with &quot;ová&quot;, .. -&gt; suffix &quot;ou&quot;. E.g. &quot;Malinová&quot; -&gt; &quot;Malinovou&quot;
- names end with &quot;[bdg..]e&quot; -&gt; same as nominative
- names end with &quot;nko&quot;, &quot;yuk&quot;, &quot;uk&quot;, &quot;er&quot;, &quot;ue&quot;, &quot;i&quot;, &quot;g&quot;, ... -&gt; same as nominative
- names end with &quot;[^bdg..]e&quot; -&gt; suffix &quot;i&quot;</comm:comment>
        </assignment>
      </assignments>
      <comm:comment>Accusative - see Column comment
Vocative - same as Nominative</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Accusative suffix &quot;&quot;, &quot;i&quot;, &quot;u&quot;, Vocative &quot;&quot;, &quot;e&quot;, &quot;o&quot; (Column Assigner)" image="images/ColumnAssigner.large.png" class="com.ataccama.dqc.tasks.expressions.ColumnAssigner">
    <properties>
      <assignments>
        <assignment column="vocative">
          <expression>//jmena koncici samohlaskou, kratka(2 nebo 3 znaky), pravdepodobne vietnamska:
kratke:=(matches(&#39;^.{2}[áaeéiíoóuúyí]$&#39;, name)
		and lower(name) not in {&#39;eva&#39;, &#39;iva&#39;, &#39;ema&#39;, &#39;lea&#39;, &#39;ida&#39;, &#39;lia&#39;, &#39;mia&#39;, &#39;ana&#39;, &#39;ela&#39;, &#39;ewa&#39;, &#39;ada&#39;, &#39;ola&#39;, &#39;eda&#39;, &#39;tea&#39;, &#39;ria&#39;, &#39;ita&#39;, &#39;rea&#39;, &#39;ina&#39;, &#39;ira&#39;, &#39;bea&#39;})
	/*LUSL: zbytocne	or length(name) = 2 */;

case (
	kratke,name,
	right(name, 2) is in {&#39;ia&#39;}, left(name, length(name)-1)+&#39;e&#39;,
	right(name, 1) is in {&#39;a&#39;, &#39;e&#39;}, left(name, length(name)-1)+&#39;o&#39;,
	right(name, 1) is in {&#39;n&#39;, &#39;t&#39;, &#39;d&#39;, &#39;r&#39;, &#39;s&#39;, &#39;h&#39;, &#39;l&#39;, &#39;m&#39;, &#39;g&#39;, &#39;x&#39;}, name+&#39;o&#39;,
	null
)</expression>
          <scorer>
            <scoringEntries>
              <scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
            </scoringEntries>
          </scorer>
          <comm:comment>Vocative:
- 3-letter names end with vocal (with exceptions) -&gt; same as nomitanive
- names end with &quot;ia&quot; -&gt; replace with &quot;ie&quot;
- names end with &quot;a&quot; or &quot;e&quot; -&gt; replace with &quot;o&quot;
- names end with &quot;n&quot;, &quot;t&quot;, .. -&gt; add &quot;o&quot;</comm:comment>
        </assignment>
        <assignment column="accusative">
          <expression>//jmena koncici samohlaskou, kratka(2 nebo 3 znaky), pravdepodobne vietnamska:
kratke:=(matches(&#39;^.{2}[áaeéiíoóuúyí]$&#39;, name)
		and lower(name) not in {&#39;eva&#39;, &#39;iva&#39;, &#39;ema&#39;, &#39;lea&#39;, &#39;ida&#39;, &#39;lia&#39;, &#39;mia&#39;, &#39;ana&#39;, &#39;ela&#39;, &#39;ewa&#39;, &#39;ada&#39;, &#39;ola&#39;, &#39;eda&#39;, &#39;tea&#39;, &#39;ria&#39;, &#39;ita&#39;, &#39;rea&#39;, &#39;ina&#39;, &#39;ira&#39;, &#39;bea&#39;})
	/*LUSL: zbytocne	or length(name) = 2 */;

case (
	kratke,name,
	right(name, 2) is in {&#39;ia&#39;}, left(name, length(name)-1)+&#39;i&#39;,
	right(name, 1) is in {&#39;a&#39;, &#39;e&#39;}, left(name, length(name)-1)+&#39;u&#39;,
	right(name, 1) is in {&#39;n&#39;, &#39;t&#39;, &#39;d&#39;, &#39;r&#39;, &#39;s&#39;, &#39;h&#39;, &#39;l&#39;, &#39;m&#39;, &#39;g&#39;, &#39;x&#39;}, name+&#39;u&#39;,
	null
)</expression>
          <scorer>
            <scoringEntries>
              <scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
            </scoringEntries>
          </scorer>
          <comm:comment>Vocative:
- 3-letter names end with vocal (with exceptions) -&gt; same as nomitanive
- names end with &quot;ia&quot; -&gt; replace with &quot;i&quot;
- names end with &quot;a&quot; or &quot;e&quot; -&gt; replace with &quot;u&quot;
- names end with &quot;n&quot;, &quot;t&quot;, .. -&gt; add &quot;u&quot;</comm:comment>
        </assignment>
      </assignments>
      <comm:comment>Decline according to rules - see Column comments</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="No declension (Union Same)" image="images/UnionSame.large.png" class="com.ataccama.dqc.tasks.conditions.UnionSame">
    <properties>
      <comm:comment>No declension</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Accusative suffix &quot;&quot;, Vocative &quot;&quot; (Column Assigner)" image="images/ColumnAssigner.large.png" class="com.ataccama.dqc.tasks.expressions.ColumnAssigner">
    <properties>
      <assignments>
        <assignment expression="name" column="vocative">
          <scorer>
            <scoringEntries>
              <scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
            </scoringEntries>
          </scorer>
        </assignment>
        <assignment expression="name" column="accusative">
          <scorer>
            <scoringEntries>
              <scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
            </scoringEntries>
          </scorer>
        </assignment>
      </assignments>
      <comm:comment>We don&#39;t decline one and two-letter names.</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Union all female names (Union Same)" image="images/UnionSame.large.png" class="com.ataccama.dqc.tasks.conditions.UnionSame">
    <properties>
      <comm:comment>Union all female names</comm:comment>
    </properties>
  </configAlg>
  <configAlg name="Remove internal columns (Alter Format)" image="images/AlterFormat.large.png" class="com.ataccama.dqc.tasks.flow.AlterFormat">
    <properties>
      <addedColumns/>
      <removedColumns>
        <columnRef name="expl_f_rule"/>
      </removedColumns>
    </properties>
  </configAlg>
  <configAlg name="out (Integration Output)" image="images/OutputStep.large.png" class="com.ataccama.dqc.tasks.common.usersteps.io.OutputStep">
    <properties>
      <requiredColumns/>
    </properties>
  </configAlg>
  <referedBy name="cz_name_declension_simple"/>
</configDoc>